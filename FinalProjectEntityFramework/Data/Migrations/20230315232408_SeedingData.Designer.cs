// <auto-generated />
using System;
using FinalProjectEntityFramework.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProjectEntityFramework.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230315232408_SeedingData")]
    partial class SeedingData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FinalProjectEntityFramework.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cleaning"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shopping"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Finances"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Yardwork"
                        });
                });

            modelBuilder.Entity("FinalProjectEntityFramework.Models.Chore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ChoreType")
                        .HasColumnType("int");

                    b.Property<string>("ChoreUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ChoreUserId");

                    b.ToTable("Chores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ChoreType = 2,
                            ChoreUserId = "1a",
                            IsComplete = false,
                            Name = "Do dishes"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            ChoreType = 4,
                            ChoreUserId = "2a",
                            IsComplete = false,
                            Name = "Do taxes"
                        },
                        new
                        {
                            Id = 3,
                            ChoreType = 0,
                            IsComplete = false,
                            Name = "Pay ticket"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            ChoreType = 1,
                            ChoreUserId = "2a",
                            IsComplete = false,
                            Name = "Tidy the house"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            ChoreType = 3,
                            ChoreUserId = "3a",
                            IsComplete = false,
                            Name = "Vacuum house"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            ChoreType = 5,
                            ChoreUserId = "1a",
                            IsComplete = false,
                            Name = "Stock up for the year"
                        },
                        new
                        {
                            Id = 7,
                            ChoreType = 1,
                            IsComplete = false,
                            Name = "Eat dinner"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            ChoreType = 2,
                            ChoreUserId = "1a",
                            IsComplete = false,
                            Name = "Buy groceries"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            ChoreType = 4,
                            ChoreUserId = "3a",
                            IsComplete = false,
                            Name = "Shovel"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            ChoreType = 3,
                            ChoreUserId = "1a",
                            IsComplete = false,
                            Name = "Pay car insurance"
                        });
                });

            modelBuilder.Entity("FinalProjectEntityFramework.Models.ChoreMonths", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ChoreId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChoreId");

                    b.ToTable("ChoreMonths");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChoreId = 2,
                            Month = 0
                        },
                        new
                        {
                            Id = 2,
                            ChoreId = 2,
                            Month = 6
                        },
                        new
                        {
                            Id = 3,
                            ChoreId = 3,
                            Month = 8
                        },
                        new
                        {
                            Id = 4,
                            ChoreId = 6,
                            Month = 0
                        },
                        new
                        {
                            Id = 5,
                            ChoreId = 9,
                            Month = 0
                        },
                        new
                        {
                            Id = 6,
                            ChoreId = 9,
                            Month = 1
                        },
                        new
                        {
                            Id = 7,
                            ChoreId = 9,
                            Month = 2
                        },
                        new
                        {
                            Id = 8,
                            ChoreId = 9,
                            Month = 10
                        },
                        new
                        {
                            Id = 9,
                            ChoreId = 9,
                            Month = 11
                        });
                });

            modelBuilder.Entity("FinalProjectEntityFramework.Models.ChoreUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afe3a347-667a-4896-bc91-94694d0aace5",
                            Email = "email@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jaeden",
                            LastName = "Fuller",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa16fa05-bdeb-48cc-a9aa-a7b4971db319",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d71f2916-09a1-47a0-a705-b4e21f94df0f",
                            Email = "unoriginal@email.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "933e899b-976d-4092-a9e7-8787d8f72053",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44dfde02-c43e-44db-ae92-6069e80ca4ed",
                            Email = "moreunoriginal@email.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb8f3e3a-54d6-4731-b7ef-ff0e819d0220",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FinalProjectEntityFramework.Models.Chore", b =>
                {
                    b.HasOne("FinalProjectEntityFramework.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("FinalProjectEntityFramework.Models.ChoreUser", "ChoreUser")
                        .WithMany()
                        .HasForeignKey("ChoreUserId");

                    b.Navigation("Category");

                    b.Navigation("ChoreUser");
                });

            modelBuilder.Entity("FinalProjectEntityFramework.Models.ChoreMonths", b =>
                {
                    b.HasOne("FinalProjectEntityFramework.Models.Chore", "Chore")
                        .WithMany("ChoreMonths")
                        .HasForeignKey("ChoreId");

                    b.Navigation("Chore");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FinalProjectEntityFramework.Models.ChoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FinalProjectEntityFramework.Models.ChoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProjectEntityFramework.Models.ChoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FinalProjectEntityFramework.Models.ChoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalProjectEntityFramework.Models.Chore", b =>
                {
                    b.Navigation("ChoreMonths");
                });
#pragma warning restore 612, 618
        }
    }
}
